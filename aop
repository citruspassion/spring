aop即面向切面编程
在oop中处理一些公共行为就显得很颓势，我们需要很多的重复的代码
aop这种横切的技术，将影响多个类的公共行为封装到一个可重用模块 ，这个模块就叫aspect
也就是将与业务无关的，却为业务所共同调用的逻辑进行封装    减少了重复代码，降低了耦合
简单的说就是我们机械中的横切面，通过这个横切面我们可以知道内部的样子
AOP的关键单元是切面，或者说关注点   一些切面可能有集中的代码，但是有些可能被分散或者混杂在一起，例如日志或者事务。这些分散的切面被称为横切关注点
同时有两种实现方式一个通过注解，一个通过xml


在Spring AOP中关注点和横切关注点有什么不同？
关注点是我们想在应用的可重用模块中实现的行为。关注点可以被定义为：我们想实现以解决特定业务问题的方法。比如，在所有电子商务应用中，不同的关注点（或者模块）可能是库存管理、航运管理、用户管理等。
横切关注点是贯穿整个应用程序的关注点。像日志、安全和数据转换，它们在应用的每一个模块都是必须的，所以他们是一种横切关注点。


 AOP的基本概念
(1)Aspect(切面):通常是一个类，里面可以定义切入点和通知
(2)JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用
(3)Advice(通知):AOP在特定的切入点上执行的增强处理，有before,after,afterReturning,afterThrowing,around
(4)Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式
(5)AOP代理：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类



引介(Introduction)是什么？
引介让一个切面可以声明被通知的对象实现了任何他们没有真正实现的额外接口，而且为这些对象提供接口的实现
使用 @DeclareParaents 注解来生成一个引介。

通知方法:

前置通知:在我们执行目标方法之前运行(@Before)
后置通知:在我们目标方法运行结束之后 ,不管有没有异常(@After)
返回通知:在我们的目标方法正常返回值后运行(@AfterReturning)
异常通知:在我们的目标方法出现异常后运行(@AfterThrowing)
环绕通知:动态代理, 需要手动执行joinPoint.procced()(其实就是执行我们的目标方法执行之前相当于前置通知, 执行之后就相当于我们后置通知(@Around)
