我们都知道ioc是控制反转的意思，它依赖于依赖倒置原则
那么我们假设一个例子方便理解这个原则
数据库由很多种，我们假如用sql server写的工程，现在客户要用Oracle，那么我们得花时间改。这就很麻烦
再比如我们按照轮胎-底盘-车身-汽车的程序生产汽车，如果客户说要改轮胎，那么首先地盘就不匹配，我们就得从头到尾的全改
假如我们先设计汽车轮廓，后设计地盘，最后再轮胎，那么轮胎怎么改，都不影响我们


那么控制反转就是采取的‘依赖注入’的方法
即  就是把底层类作为参数传入上层类，实现上层类对下层类的“控制”。这里我们用构造方法传递的依赖注入方式
总体来说就是基于 依赖倒置原则，采取依赖注入的方法


Class Car{
private Frame frame;
Car(){
this.frame=new Frame();
public void run()

}
}
Class Frame{
private Tire tire;
Frame(){
this.tire=new Tire();

}
Class Tire{
private int size;
Tire(){
this.size=10;

}
这样就可以想用哪个值就用那个，可是这样也出现一个问题，我们没法动态改，只能提前知道size
如果要用动态赋值就得这样

Class Car{
private Frame frame;
Car(int size){
this.frame=new Frame(size);
public void run()

}
}
Class Frame{
private Tire tire;
Frame(int size){
this.tire=new Tire(size);

}
Class Tire{
private int size;
Tire(int size){
this.size=size;

}
int size=40;
Car car=new Car(size);
car.run();
我们可以看出这样非常的麻烦，如果这都变得很复杂，那就显得很不合适

Class Car{
private Frame frame;
Car(Frame frame){
this.frame=frame;
public void run()

}
}
Class Frame{
private Tire tire;
Frame(Tire tire){
this.tire=tire;

}
Class Tire{
private int size;
Tire(int size){
this.size=size;

}
int size=10;
Tire tire=new Tire(size);
Frame frame=new Frame(tire);
Car car=new Car(frame);
我们这样就可以动态修改




}
https://www.zhihu.com/question/23277575
依赖注入的三种方式
无非是
1。构造器注入
2.setter注入，
3.接口注入
